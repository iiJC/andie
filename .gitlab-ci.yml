# Docker image to use on the CI / pipeline worker machines
image: gradle:8-jdk17-alpine

# List of stages for jobs, and their order of execution
stages:
  - build
  - test
  - package
  - deploy

variables:
  GRADLE_USER_HOME: "$CI_PROJECT_DIR/.gradle"

before_script:
  - echo "Using Gradle build tool"
  - gradle --version

compile-code:
  stage: build
  script:
    - echo 'Attempting to compile the code...'
    - gradle -Dorg.gradle.welcome=never --no-daemon compileJava
    - echo 'Done.'
  artifacts:
    paths:
      - build

build-job:
  stage: build
  script:
    - echo "Compiling the code..."
    - gradle build jar
    - echo "Compile complete."
  artifacts:
    paths:
      - andie.jar

test-job:
  stage: test
  script:
    - gradle test
  artifacts:
    reports:
      junit: build/test-results/test/TEST-*.xml
    paths:
      - build/test-results/test

unit-test-job:
  stage: test
  script:
    - echo "Attempting to run unit tests..."
    - gradle --no-daemon test

lint-test-job:
  stage: test
  script:
    - echo "Linting code... This will take about 10 seconds."
    - sleep 10
    - echo "No lint issues found."

create-jar:
  stage: package
  script:
    - echo 'Attempting to create JAR file...'
    - gradle -Dorg.gradle.welcome=never --no-daemon build jar
    - echo 'Done.'
  artifacts:
    paths:
      - andie.jar

deploy-job:
  stage: deploy
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."

pages:
  stage: deploy
  script:
    - echo "Generating Javadoc..."
    - gradle javadoc
    - mkdir -p public
    - cp -r build/docs/javadoc/* public/
  artifacts:
    paths:
      - public
  only:
    - main
